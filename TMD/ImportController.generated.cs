// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace TMD.Controllers
{
    public partial class ImportController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ImportController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected ImportController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult MenuWidget()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.MenuWidget);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Trip()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Trip);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Sites()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Sites);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Trees()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Trees);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Review()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Review);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Finish()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Finish);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ViewImport()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ViewImport);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ImportController Actions { get { return MVC.Import; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Import";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Import";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string MenuWidget = "MenuWidget";
            public readonly string History = "History";
            public readonly string Trip = "Trip";
            public readonly string Sites = "Sites";
            public readonly string Trees = "Trees";
            public readonly string Review = "Review";
            public readonly string Finish = "Finish";
            public readonly string ViewImport = "View";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string MenuWidget = "MenuWidget";
            public const string History = "History";
            public const string Trip = "Trip";
            public const string Sites = "Sites";
            public const string Trees = "Trees";
            public const string Review = "Review";
            public const string Finish = "Finish";
            public const string ViewImport = "View";
        }


        static readonly ActionParamsClass_MenuWidget s_params_MenuWidget = new ActionParamsClass_MenuWidget();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_MenuWidget MenuWidgetParams { get { return s_params_MenuWidget; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_MenuWidget
        {
            public readonly string isSelected = "isSelected";
        }
        static readonly ActionParamsClass_History s_params_History = new ActionParamsClass_History();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_History HistoryParams { get { return s_params_History; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_History
        {
            public readonly string innerAction = "innerAction";
        }
        static readonly ActionParamsClass_Trip s_params_Trip = new ActionParamsClass_Trip();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Trip TripParams { get { return s_params_Trip; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Trip
        {
            public readonly string id = "id";
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_Sites s_params_Sites = new ActionParamsClass_Sites();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Sites SitesParams { get { return s_params_Sites; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Sites
        {
            public readonly string id = "id";
            public readonly string model = "model";
            public readonly string innerAction = "innerAction";
        }
        static readonly ActionParamsClass_Trees s_params_Trees = new ActionParamsClass_Trees();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Trees TreesParams { get { return s_params_Trees; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Trees
        {
            public readonly string id = "id";
            public readonly string model = "model";
            public readonly string innerAction = "innerAction";
        }
        static readonly ActionParamsClass_Review s_params_Review = new ActionParamsClass_Review();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Review ReviewParams { get { return s_params_Review; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Review
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_Finish s_params_Finish = new ActionParamsClass_Finish();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Finish FinishParams { get { return s_params_Finish; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Finish
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_ViewImport s_params_ViewImport = new ActionParamsClass_ViewImport();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ViewImport ViewImportParams { get { return s_params_ViewImport; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ViewImport
        {
            public readonly string id = "id";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _WizardLayout = "_WizardLayout";
                public readonly string History = "History";
                public readonly string MenuWidget = "MenuWidget";
                public readonly string Review = "Review";
                public readonly string SitePartial = "SitePartial";
                public readonly string Sites = "Sites";
                public readonly string SitesPartial = "SitesPartial";
                public readonly string SubsiteTreesPartial = "SubsiteTreesPartial";
                public readonly string TreePartial = "TreePartial";
                public readonly string Trees = "Trees";
                public readonly string Trip = "Trip";
                public readonly string View = "View";
                public readonly string Web = "Web";
            }
            public readonly string _WizardLayout = "~/Views/Import/_WizardLayout.cshtml";
            public readonly string History = "~/Views/Import/History.cshtml";
            public readonly string MenuWidget = "~/Views/Import/MenuWidget.cshtml";
            public readonly string Review = "~/Views/Import/Review.cshtml";
            public readonly string SitePartial = "~/Views/Import/SitePartial.cshtml";
            public readonly string Sites = "~/Views/Import/Sites.cshtml";
            public readonly string SitesPartial = "~/Views/Import/SitesPartial.cshtml";
            public readonly string SubsiteTreesPartial = "~/Views/Import/SubsiteTreesPartial.cshtml";
            public readonly string TreePartial = "~/Views/Import/TreePartial.cshtml";
            public readonly string Trees = "~/Views/Import/Trees.cshtml";
            public readonly string Trip = "~/Views/Import/Trip.cshtml";
            public readonly string View = "~/Views/Import/View.cshtml";
            public readonly string Web = "~/Views/Import/Web.config";
            static readonly _DisplayTemplatesClass s_DisplayTemplates = new _DisplayTemplatesClass();
            public _DisplayTemplatesClass DisplayTemplates { get { return s_DisplayTemplates; } }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public partial class _DisplayTemplatesClass
            {
                public readonly string ImportFinishedSiteModel = "ImportFinishedSiteModel";
                public readonly string ImportFinishedSubsiteModel = "ImportFinishedSubsiteModel";
                public readonly string ImportFinishedTreeModel = "ImportFinishedTreeModel";
                public readonly string ImportFinishedTripModel = "ImportFinishedTripModel";
                public readonly string ImportSiteModel = "ImportSiteModel";
                public readonly string ImportSubsiteModel = "ImportSubsiteModel";
                public readonly string ImportTreeModel = "ImportTreeModel";
            }
            static readonly _EditorTemplatesClass s_EditorTemplates = new _EditorTemplatesClass();
            public _EditorTemplatesClass EditorTemplates { get { return s_EditorTemplates; } }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public partial class _EditorTemplatesClass
            {
                public readonly string ImportSiteModel = "ImportSiteModel";
                public readonly string ImportSiteTreesModel = "ImportSiteTreesModel";
                public readonly string ImportSubsiteModel = "ImportSubsiteModel";
                public readonly string ImportSubsiteTreesModel = "ImportSubsiteTreesModel";
                public readonly string ImportTreeModel = "ImportTreeModel";
                public readonly string ImportTripSummaryModel = "ImportTripSummaryModel";
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_ImportController : TMD.Controllers.ImportController
    {
        public T4MVC_ImportController() : base(Dummy.Instance) { }

        [NonAction]
        partial void MenuWidgetOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, bool isSelected);

        [NonAction]
        public override System.Web.Mvc.ActionResult MenuWidget(bool isSelected)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.MenuWidget);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "isSelected", isSelected);
            MenuWidgetOverride(callInfo, isSelected);
            return callInfo;
        }

        [NonAction]
        partial void HistoryOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult History()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.History);
            HistoryOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void HistoryOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, TMD.Models.Import.ImportInnerActionModel innerAction);

        [NonAction]
        public override System.Web.Mvc.ActionResult History(TMD.Models.Import.ImportInnerActionModel innerAction)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.History);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "innerAction", innerAction);
            HistoryOverride(callInfo, innerAction);
            return callInfo;
        }

        [NonAction]
        partial void TripOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int? id);

        [NonAction]
        public override System.Web.Mvc.ActionResult Trip(int? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Trip);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            TripOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void TripOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, TMD.Models.Import.ImportTripModel model);

        [NonAction]
        public override System.Web.Mvc.ActionResult Trip(TMD.Models.Import.ImportTripModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Trip);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            TripOverride(callInfo, model);
            return callInfo;
        }

        [NonAction]
        partial void SitesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult Sites(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Sites);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            SitesOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void SitesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, TMD.Models.Import.ImportSitesModel model, TMD.Models.Import.ImportInnerActionModel innerAction);

        [NonAction]
        public override System.Web.Mvc.ActionResult Sites(TMD.Models.Import.ImportSitesModel model, TMD.Models.Import.ImportInnerActionModel innerAction)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Sites);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "innerAction", innerAction);
            SitesOverride(callInfo, model, innerAction);
            return callInfo;
        }

        [NonAction]
        partial void TreesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult Trees(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Trees);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            TreesOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void TreesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, TMD.Models.Import.ImportTreesModel model, TMD.Models.Import.ImportInnerActionModel innerAction);

        [NonAction]
        public override System.Web.Mvc.ActionResult Trees(TMD.Models.Import.ImportTreesModel model, TMD.Models.Import.ImportInnerActionModel innerAction)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Trees);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "innerAction", innerAction);
            TreesOverride(callInfo, model, innerAction);
            return callInfo;
        }

        [NonAction]
        partial void ReviewOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult Review(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Review);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ReviewOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void FinishOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult Finish(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Finish);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            FinishOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void ViewImportOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult ViewImport(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ViewImport);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ViewImportOverride(callInfo, id);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
