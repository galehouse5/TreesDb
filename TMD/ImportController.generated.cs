// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace TMD.Controllers {
    public partial class ImportController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ImportController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected ImportController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult MenuWidget() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.MenuWidget);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult StartNew() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.StartNew);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult Start() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.Start);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult Trip() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.Trip);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult Sites() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.Sites);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult Trees() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.Trees);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult Finish() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.Finish);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult Finalize() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.Finalize);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult ViewImport() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.ViewImport);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ImportController Actions { get { return Mvc.Import; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Import";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string MenuWidget = "MenuWidget";
            public readonly string Index = "Index";
            public readonly string History = "History";
            public readonly string New = "New";
            public readonly string StartNew = "New";
            public readonly string Start = "Start";
            public readonly string Trip = "Trip";
            public readonly string Sites = "Sites";
            public readonly string Trees = "Trees";
            public readonly string Finish = "Finish";
            public readonly string Finalize = "Finalize";
            public readonly string ViewImport = "View";
        }


        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string Finish = "~/Views/Import/Finish.aspx";
            public readonly string History = "~/Views/Import/History.cshtml";
            public readonly string Index = "~/Views/Import/Index.cshtml";
            public readonly string MenuWidget = "~/Views/Import/MenuWidget.ascx";
            public readonly string SitePartial = "~/Views/Import/SitePartial.ascx";
            public readonly string Sites = "~/Views/Import/Sites.aspx";
            public readonly string Sites_cshtml = "~/Views/Import/Sites.cshtml";
            public readonly string SitesPartial = "~/Views/Import/SitesPartial.ascx";
            public readonly string Start = "~/Views/Import/Start.cshtml";
            public readonly string StartSteps = "~/Views/Import/StartSteps.cshtml";
            public readonly string SubsiteTreesPartial = "~/Views/Import/SubsiteTreesPartial.ascx";
            public readonly string TreePartial = "~/Views/Import/TreePartial.ascx";
            public readonly string Trees = "~/Views/Import/Trees.aspx";
            public readonly string Trip = "~/Views/Import/Trip.cshtml";
            public readonly string View = "~/Views/Import/View.cshtml";
            public readonly string WizardLayout = "~/Views/Import/WizardLayout.cshtml";
            static readonly _DisplayTemplates s_DisplayTemplates = new _DisplayTemplates();
            public _DisplayTemplates DisplayTemplates { get { return s_DisplayTemplates; } }
            public partial class _DisplayTemplates{
                public readonly string ImportFinishedSiteModel = "ImportFinishedSiteModel";
                public readonly string ImportFinishedSubsiteModel = "ImportFinishedSubsiteModel";
                public readonly string ImportFinishedTreeModel = "ImportFinishedTreeModel";
                public readonly string ImportFinishedTripModel = "ImportFinishedTripModel";
                public readonly string Site = "Site";
                public readonly string Subsite = "Subsite";
                public readonly string Tree = "Tree";
            }
            static readonly _EditorTemplates s_EditorTemplates = new _EditorTemplates();
            public _EditorTemplates EditorTemplates { get { return s_EditorTemplates; } }
            public partial class _EditorTemplates{
                public readonly string ImportTripSummaryModel = "ImportTripSummaryModel";
                public readonly string Site = "Site";
                public readonly string SiteTrees = "SiteTrees";
                public readonly string Subsite = "Subsite";
                public readonly string SubsiteTrees = "SubsiteTrees";
                public readonly string Tree = "Tree";
                public readonly string Trip = "Trip";
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_ImportController: TMD.Controllers.ImportController {
        public T4MVC_ImportController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult MenuWidget(bool isSelected) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.MenuWidget);
            callInfo.RouteValueDictionary.Add("isSelected", isSelected);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Index() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Index);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Index(TMD.Model.IUnitOfWork uow, TMD.Models.ImportInnerActionModel innerAction) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Index);
            callInfo.RouteValueDictionary.Add("uow", uow);
            callInfo.RouteValueDictionary.Add("innerAction", innerAction);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult History() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.History);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult History(TMD.Model.IUnitOfWork uow, TMD.Models.ImportInnerActionModel innerAction) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.History);
            callInfo.RouteValueDictionary.Add("uow", uow);
            callInfo.RouteValueDictionary.Add("innerAction", innerAction);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult New() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.New);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult StartNew(TMD.Model.IUnitOfWork uow) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.StartNew);
            callInfo.RouteValueDictionary.Add("uow", uow);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Start(int id) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Start);
            callInfo.RouteValueDictionary.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Trip(int id) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Trip);
            callInfo.RouteValueDictionary.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Trip(TMD.Model.IUnitOfWork uow, TMD.Models.ImportTripModel model) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Trip);
            callInfo.RouteValueDictionary.Add("uow", uow);
            callInfo.RouteValueDictionary.Add("model", model);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Sites(TMD.Model.IUnitOfWork uow, int id) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Sites);
            callInfo.RouteValueDictionary.Add("uow", uow);
            callInfo.RouteValueDictionary.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Sites(TMD.Model.IUnitOfWork uow, TMD.Models.ImportSitesModel model, TMD.Models.ImportInnerActionModel innerAction) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Sites);
            callInfo.RouteValueDictionary.Add("uow", uow);
            callInfo.RouteValueDictionary.Add("model", model);
            callInfo.RouteValueDictionary.Add("innerAction", innerAction);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Trees(TMD.Model.IUnitOfWork uow, int id) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Trees);
            callInfo.RouteValueDictionary.Add("uow", uow);
            callInfo.RouteValueDictionary.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Trees(TMD.Model.IUnitOfWork uow, TMD.Models.ImportTreesModel model, TMD.Models.ImportInnerActionModel innerAction) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Trees);
            callInfo.RouteValueDictionary.Add("uow", uow);
            callInfo.RouteValueDictionary.Add("model", model);
            callInfo.RouteValueDictionary.Add("innerAction", innerAction);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Finish(int id) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Finish);
            callInfo.RouteValueDictionary.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Finalize(TMD.Model.IUnitOfWork uow, int id) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Finalize);
            callInfo.RouteValueDictionary.Add("uow", uow);
            callInfo.RouteValueDictionary.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult ViewImport(int id) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.ViewImport);
            callInfo.RouteValueDictionary.Add("id", id);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591
