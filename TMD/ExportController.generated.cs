// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace TMD.Controllers
{
    public partial class ExportController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ExportController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected ExportController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Trees()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Trees);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Sites()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Sites);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult SitesSpecies()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SitesSpecies);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult States()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.States);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult StatesSpecies()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.StatesSpecies);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Species()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Species);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult SpeciesByFilters()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SpeciesByFilters);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult LocationsByFilters()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LocationsByFilters);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ExportController Actions { get { return MVC.Export; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Export";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Export";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Trees = "Trees";
            public readonly string Sites = "Sites";
            public readonly string SitesSpecies = "SitesSpecies";
            public readonly string States = "States";
            public readonly string StatesSpecies = "StatesSpecies";
            public readonly string Species = "Species";
            public readonly string SpeciesByFilters = "SpeciesByFilters";
            public readonly string LocationsByFilters = "LocationsByFilters";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Trees = "Trees";
            public const string Sites = "Sites";
            public const string SitesSpecies = "SitesSpecies";
            public const string States = "States";
            public const string StatesSpecies = "StatesSpecies";
            public const string Species = "Species";
            public const string SpeciesByFilters = "SpeciesByFilters";
            public const string LocationsByFilters = "LocationsByFilters";
        }


        static readonly ActionParamsClass_Trees s_params_Trees = new ActionParamsClass_Trees();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Trees TreesParams { get { return s_params_Trees; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Trees
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_Sites s_params_Sites = new ActionParamsClass_Sites();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Sites SitesParams { get { return s_params_Sites; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Sites
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_SitesSpecies s_params_SitesSpecies = new ActionParamsClass_SitesSpecies();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SitesSpecies SitesSpeciesParams { get { return s_params_SitesSpecies; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SitesSpecies
        {
            public readonly string id = "id";
            public readonly string botanicalName = "botanicalName";
        }
        static readonly ActionParamsClass_States s_params_States = new ActionParamsClass_States();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_States StatesParams { get { return s_params_States; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_States
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_StatesSpecies s_params_StatesSpecies = new ActionParamsClass_StatesSpecies();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_StatesSpecies StatesSpeciesParams { get { return s_params_StatesSpecies; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_StatesSpecies
        {
            public readonly string id = "id";
            public readonly string botanicalName = "botanicalName";
        }
        static readonly ActionParamsClass_Species s_params_Species = new ActionParamsClass_Species();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Species SpeciesParams { get { return s_params_Species; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Species
        {
            public readonly string botanicalName = "botanicalName";
            public readonly string commonName = "commonName";
        }
        static readonly ActionParamsClass_SpeciesByFilters s_params_SpeciesByFilters = new ActionParamsClass_SpeciesByFilters();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SpeciesByFilters SpeciesByFiltersParams { get { return s_params_SpeciesByFilters; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SpeciesByFilters
        {
            public readonly string botanicalNameFilter = "botanicalNameFilter";
            public readonly string commonNameFilter = "commonNameFilter";
        }
        static readonly ActionParamsClass_LocationsByFilters s_params_LocationsByFilters = new ActionParamsClass_LocationsByFilters();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_LocationsByFilters LocationsByFiltersParams { get { return s_params_LocationsByFilters; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_LocationsByFilters
        {
            public readonly string stateFilter = "stateFilter";
            public readonly string countyFilter = "countyFilter";
            public readonly string siteFilter = "siteFilter";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_ExportController : TMD.Controllers.ExportController
    {
        public T4MVC_ExportController() : base(Dummy.Instance) { }

        [NonAction]
        partial void TreesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult Trees(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Trees);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            TreesOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void SitesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult Sites(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Sites);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            SitesOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void SitesSpeciesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string botanicalName);

        [NonAction]
        public override System.Web.Mvc.ActionResult SitesSpecies(int id, string botanicalName)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SitesSpecies);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "botanicalName", botanicalName);
            SitesSpeciesOverride(callInfo, id, botanicalName);
            return callInfo;
        }

        [NonAction]
        partial void StatesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult States(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.States);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            StatesOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void StatesSpeciesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id, string botanicalName);

        [NonAction]
        public override System.Web.Mvc.ActionResult StatesSpecies(int id, string botanicalName)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.StatesSpecies);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "botanicalName", botanicalName);
            StatesSpeciesOverride(callInfo, id, botanicalName);
            return callInfo;
        }

        [NonAction]
        partial void SpeciesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string botanicalName, string commonName);

        [NonAction]
        public override System.Web.Mvc.ActionResult Species(string botanicalName, string commonName)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Species);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "botanicalName", botanicalName);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "commonName", commonName);
            SpeciesOverride(callInfo, botanicalName, commonName);
            return callInfo;
        }

        [NonAction]
        partial void SpeciesByFiltersOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string botanicalNameFilter, string commonNameFilter);

        [NonAction]
        public override System.Web.Mvc.ActionResult SpeciesByFilters(string botanicalNameFilter, string commonNameFilter)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SpeciesByFilters);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "botanicalNameFilter", botanicalNameFilter);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "commonNameFilter", commonNameFilter);
            SpeciesByFiltersOverride(callInfo, botanicalNameFilter, commonNameFilter);
            return callInfo;
        }

        [NonAction]
        partial void LocationsByFiltersOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string stateFilter, string countyFilter, string siteFilter);

        [NonAction]
        public override System.Web.Mvc.ActionResult LocationsByFilters(string stateFilter, string countyFilter, string siteFilter)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LocationsByFilters);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "stateFilter", stateFilter);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "countyFilter", countyFilter);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "siteFilter", siteFilter);
            LocationsByFiltersOverride(callInfo, stateFilter, countyFilter, siteFilter);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
