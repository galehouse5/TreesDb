@model EntityGridModel<TMD.Model.Trees.GlobalMeasuredSpecies>
@(Html.DataTablesGrid<TMD.Model.Trees.GlobalMeasuredSpecies>(parameterNamePrefix: Model.ParameterNamePrefix,
    columns: builder =>
    {
        builder
            .Custom("BotanicalName", species => Html.ActionLink(species.ScientificName, "SpeciesDetails", "Browse", new { botanicalName = species.ScientificName, commonName = species.CommonName }, null))
            .Options(header: "Botanical name", canFilter: true, filterTitle: "Search botanical names");
        builder
            .Custom("CommonName", species => Html.ActionLink(species.CommonName, "SpeciesDetails", "Browse", new { botanicalName = species.ScientificName, commonName = species.CommonName }, null))
            .Options(header: "Common name", canFilter: true, filterTitle: "Search common names");
        builder
            .Custom("MaxHeight", species => species.MaxHeight.IsValidAndSpecified() ?
                Html.ActionLink(species.MaxHeight.ToString(UserSession.Units), "TreeDetails", "Browse", new { id = species.MaxHeightTree.Id }, null)
                : MvcHtmlString.Create("-"))
            .Options(header: "Max height", canFilter: false, defaultSortAscending: false);
        builder
            .Custom("MaxGirth", species => species.MaxGirth.IsValidAndSpecified() ?
                Html.ActionLink(species.MaxGirth.ToString(UserSession.Units, renderMode: UnitRenderMode.SubprefixOnly), "TreeDetails", "Browse", new { id = species.MaxGirthTree.Id }, null)
                : MvcHtmlString.Create("-"))
            .Options(header: "Max girth", canFilter: false, defaultSortAscending: false);
        builder
            .Custom("MaxCrownSpread", species => species.MaxCrownSpread.IsValidAndSpecified() ?
                Html.ActionLink(species.MaxCrownSpread.ToString(UserSession.Units), "TreeDetails", "Browse", new { id = species.MaxCrownSpreadTree.Id }, null)
                : MvcHtmlString.Create("-"))
            .Options(header: "Max crown spread", canFilter: false, defaultSortAscending: false);
    },
    rowsPerPage: Model.RowsPerPage,
    dataSource: Model.PageEntities, filteredRowCount: Model.FilteredEntitiesCount, totalRowCount: Model.TotalEntitiesCount))