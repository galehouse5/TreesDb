@model EntityGridModel<Subsite>
@(Html.DataTablesGrid<Subsite>(parameterNamePrefix: Model.ParameterNamePrefix,
    columns: builder =>
    {
        builder
            .Custom("State", subsite => Html.ActionLink(subsite.State.Name, MVC.Browse.StateDetails(subsite.State.Id)))
            .Options(canFilter: true, header: "State", filterTitle: "Search states");
        builder
            .Custom("County", subsite => subsite.County)
            .Options(canFilter: true, header: "County", filterTitle: "Search county");
        builder
            .Custom("Site", subsite => Html.ActionLink(subsite.Site.Name, MVC.Browse.SiteDetails(subsite.Site.Id)))
            .Options(canFilter: true, filterTitle: "Search sites");
        builder
            .Custom("RHI5", subsite => subsite.RHI5.HasValue ? 
                MvcHtmlString.Create(subsite.RHI5.ToString()) 
                : MvcHtmlString.Create("-"))
            .Options(canFilter: false, defaultSortAscending: false);
        builder
            .Custom("RHI10", subsite => subsite.RHI10.HasValue ?
                MvcHtmlString.Create(subsite.RHI10.ToString())
                : MvcHtmlString.Create("-"))
            .Options(canFilter: false, defaultSortAscending: false);
        builder
            .Custom("RGI5", subsite => subsite.RGI5.HasValue ?
                MvcHtmlString.Create(subsite.RGI5.ToString())
                : MvcHtmlString.Create("-"))
            .Options(canFilter: false, defaultSortAscending: false);
        builder
            .Custom("RGI10", subsite => subsite.RGI10.HasValue ?
                MvcHtmlString.Create(subsite.RGI10.ToString())
                : MvcHtmlString.Create("-"))
            .Options(canFilter: false, defaultSortAscending: false);
    },
    rowsPerPage: Model.RowsPerPage,
    dataSource: Model.PageEntities, filteredRowCount: Model.FilteredEntitiesCount, totalRowCount: Model.TotalEntitiesCount))